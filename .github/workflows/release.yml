name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.1.0, etc.

permissions:
  contents: write
  actions: read

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y qtbase5-dev qt5-qmake cmake build-essential

      - name: Build application
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j$(nproc)

      - name: Create Linux tarball
        run: |
          cd build
          tar -czf HACKED-linux-x64.tar.gz HACKED

      - name: Create Linux AppImage
        run: |
          cd build
          # Create AppImage structure
          mkdir -p HACKED.AppDir/usr/bin
          mkdir -p HACKED.AppDir/usr/share/applications
          mkdir -p HACKED.AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable
          cp HACKED HACKED.AppDir/usr/bin/
          chmod +x HACKED.AppDir/usr/bin/HACKED
          
          # Create desktop file
          cat > HACKED.AppDir/usr/share/applications/hacked.desktop << 'EOF'
          [Desktop Entry]
          Name=HACKED
          Comment=Belgian System Simulation
          Exec=HACKED
          Icon=hacked
          Type=Application
          Categories=Utility;
          EOF
          
          # Create simple AppImage without FUSE
          # Download appimagetool and extract it
          wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage
          
          # Try to create AppImage, fallback to tarball if it fails
          if ./appimagetool-x86_64.AppImage HACKED.AppDir HACKED-linux-x64.AppImage 2>/dev/null; then
            echo "AppImage created successfully"
          else
            echo "AppImage creation failed, creating portable tarball instead"
            tar -czf HACKED-linux-x64-portable.tar.gz -C HACKED.AppDir .
            mv HACKED-linux-x64-portable.tar.gz HACKED-linux-x64.AppImage
          fi

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HACKED-linux-x64
          path: |
            build/HACKED-linux-x64.tar.gz
            build/HACKED-linux-x64.AppImage

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install qt@5 cmake

      - name: Set Qt environment
        run: |
          echo "QT_DIR=$(brew --prefix qt@5)" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix qt@5)/bin:$PATH" >> $GITHUB_ENV

      - name: Build application
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_PREFIX_PATH=$(brew --prefix qt@5)
          make -j$(sysctl -n hw.ncpu)

      - name: Create macOS tarball
        run: |
          cd build
          tar -czf HACKED-macos-x64.tar.gz HACKED.app

      - name: Create macOS DMG
        run: |
          cd build
          # Create DMG
          hdiutil create -volname "HACKED" -srcfolder HACKED.app -ov -format UDZO HACKED-macos-x64.dmg

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HACKED-macos-x64
          path: |
            build/HACKED-macos-x64.tar.gz
            build/HACKED-macos-x64.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install aqtinstall

      - name: Install Qt
        run: |
          python -m aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir Qt

      - name: Set Qt environment
        run: |
          echo "Qt_DIR=$env:GITHUB_WORKSPACE\Qt\5.15.2\msvc2019_64" >> $env:GITHUB_ENV
          echo "PATH=$env:GITHUB_WORKSPACE\Qt\5.15.2\msvc2019_64\bin;$env:PATH" >> $env:GITHUB_ENV

      - name: Build application
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="$env:GITHUB_WORKSPACE\Qt\5.15.2\msvc2019_64"
          cmake --build . --config Release

      - name: Create Windows tarball
        run: |
          cd build/Release
          tar -czf HACKED-windows-x64.tar.gz HACKED.exe

      - name: Create Windows installer
        run: |
          cd build/Release
          
          # Verify the executable exists
          if (Test-Path "HACKED.exe") {
            Write-Host "‚úÖ HACKED.exe found"
            Get-Item HACKED.exe | Select-Object Name, Length, LastWriteTime
          } else {
            Write-Host "‚ùå HACKED.exe not found!"
            exit 1
          }
          
          # Create NSIS installer script with better error handling
          @"
          !include "MUI2.nsh"
          !include "LogicLib.nsh"
          
          Name "HACKED"
          OutFile "HACKED-windows-x64-setup.exe"
          InstallDir "$PROGRAMFILES\HACKED"
          
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH
          
          !insertmacro MUI_LANGUAGE "English"
          
          Section "Install"
            SetOutPath "$INSTDIR"
            
            # Copy the executable with error checking
            File "HACKED.exe"
            
            # Verify the file was copied
            IfFileExists "$INSTDIR\HACKED.exe" 0 +3
              DetailPrint "‚úÖ HACKED.exe installed successfully"
              Goto +2
              DetailPrint "‚ùå Failed to install HACKED.exe"
            
            # Create desktop shortcut
            CreateShortCut "$DESKTOP\HACKED.lnk" "$INSTDIR\HACKED.exe"
            
            # Create start menu shortcut
            CreateDirectory "$SMPROGRAMS\HACKED"
            CreateShortCut "$SMPROGRAMS\HACKED\HACKED.lnk" "$INSTDIR\HACKED.exe"
            
            # Write uninstaller
            WriteUninstaller "$INSTDIR\Uninstall.exe"
            
            # Write registry information for add/remove programs
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "DisplayName" "HACKED - Belgian System Simulation"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "DisplayIcon" "$INSTDIR\HACKED.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "Publisher" "HACKED Team"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "DisplayVersion" "1.0.8"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED" "NoRepair" 1
          SectionEnd
          
          Section "Uninstall"
            # Remove shortcuts
            Delete "$DESKTOP\HACKED.lnk"
            Delete "$SMPROGRAMS\HACKED\HACKED.lnk"
            RMDir "$SMPROGRAMS\HACKED"
            
            # Remove files
            Delete "$INSTDIR\HACKED.exe"
            Delete "$INSTDIR\Uninstall.exe"
            
            # Remove directory
            RMDir "$INSTDIR"
            
            # Remove registry keys
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\HACKED"
          SectionEnd
          "@ | Out-File -FilePath "installer.nsi" -Encoding UTF8
          
          # Create installer
          makensis installer.nsi
          
          # Verify installer was created
          if (Test-Path "HACKED-windows-x64-setup.exe") {
            Write-Host "‚úÖ Installer created successfully"
            Get-Item HACKED-windows-x64-setup.exe | Select-Object Name, Length, LastWriteTime
          } else {
            Write-Host "‚ùå Installer creation failed!"
            exit 1
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HACKED-windows-x64
          path: |
            build/Release/HACKED-windows-x64.tar.gz
            build/Release/HACKED-windows-x64-setup.exe

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üéâ HACKED - Belgian System Simulation
            
            ### üì¶ Downloads
            
            #### **Linux (x64)**
            - **AppImage**: HACKED-linux-x64.AppImage (Recommended)
            - **Tarball**: HACKED-linux-x64.tar.gz
            
            #### **macOS (x64)**
            - **DMG**: HACKED-macos-x64.dmg (Recommended)
            - **Tarball**: HACKED-macos-x64.tar.gz
            
            #### **Windows (x64)**
            - **Installer**: HACKED-windows-x64-setup.exe (Recommended)
            - **Tarball**: HACKED-windows-x64.tar.gz
            
            ### üöÄ Installation
            
            #### **Linux:**
            - **AppImage**: `chmod +x HACKED-linux-x64.AppImage && ./HACKED-linux-x64.AppImage`
            - **Tarball**: `tar -xzf HACKED-linux-x64.tar.gz && ./HACKED`
            
            #### **macOS:**
            - **DMG**: Double-click to mount, drag to Applications
            - **Tarball**: `tar -xzf HACKED-macos-x64.tar.gz && ./HACKED.app/Contents/MacOS/HACKED`
            
            #### **Windows:**
            - **Installer**: Double-click HACKED-windows-x64-setup.exe
            - **Tarball**: Extract and run HACKED.exe
            
            ### üîß Features
            - Fullscreen Belgian system simulation
            - Automatic screenshots after 30 seconds
            - Exit with password: "chicon"
            
            ### ‚ö†Ô∏è Safety Notice
            This is a harmless simulation application for educational purposes only.
            No actual system hacking occurs.
          draft: false
          prerelease: false

      - name: Upload Linux Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-linux-x64/HACKED-linux-x64.AppImage
          asset_name: HACKED-linux-x64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-linux-x64/HACKED-linux-x64.tar.gz
          asset_name: HACKED-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-macos-x64/HACKED-macos-x64.dmg
          asset_name: HACKED-macos-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload macOS Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-macos-x64/HACKED-macos-x64.tar.gz
          asset_name: HACKED-macos-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-windows-x64/HACKED-windows-x64-setup.exe
          asset_name: HACKED-windows-x64-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HACKED-windows-x64/HACKED-windows-x64.tar.gz
          asset_name: HACKED-windows-x64.tar.gz
          asset_content_type: application/gzip 